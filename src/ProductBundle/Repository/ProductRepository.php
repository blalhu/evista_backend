<?php

namespace ProductBundle\Repository;

use OrderBundle\Entity\OrderItem;
use OrderBundle\Entity\ProductOrder;
use ProductBundle\Entity\OrderActualizationError;
use ProductBundle\Exceptions\NotEnoughProductException;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param ProductOrder $order
     * @return OrderActualizationError[]
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function actualizeOrder( ProductOrder $order ): array
    {
        $errors = [];
        foreach ( $order->getOrderItems() as $orderItem ) {
            try {
                $this->actualizeOrderItem($orderItem);
            } catch (NotEnoughProductException $e) {
                $errors[] = new OrderActualizationError(
                    $orderItem->getProduct(),
                    'Not enough product to fulfil the request for "'.$orderItem->getProduct()->getName().'" product.'
                );
            }
        }
        if ( empty($errors) ) {
            $this->_em->flush();
        }
        return $errors;
    }

    private function actualizeOrderItem( OrderItem $item )
    {
        $product = $item->getProduct();
        if ( $product->getAvailableQuantity() < $item->getQuantity() ) {
            throw new NotEnoughProductException();
        }
        $product->setAvailableQuantity(
            $product->getAvailableQuantity()
            - $item->getQuantity()
        );
        $this->_em->persist($product);
    }

}
